# Simple workflow for deploying static content to GitHub Pages
name: UI

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Runs on pull requests
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages-${{ github.event_name == 'pull_request' && github.event.pull_request.number || 'main' }}"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: ${{ github.event_name == 'pull_request' && format('github-pages-pr-{0}', github.event.pull_request.number) || 'github-pages' }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Prepare UI content
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, create a subdirectory structure
            mkdir -p preview/pr-${{ github.event.pull_request.number }}
            cp -r ui/* preview/pr-${{ github.event.pull_request.number }}/
            echo "Prepared preview for PR #${{ github.event.pull_request.number }}"
          else
            # For main branch, use ui directly
            cp -r ui preview
            echo "Prepared main deployment"
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'preview'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Update PR preview status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `${{ steps.deployment.outputs.page_url }}pr-${prNumber}/`;

            // Find existing preview comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.data.find(
              comment => comment.body.includes('## üöÄ Preview Deployments')
            );

            let commentBody;
            if (existingComment) {
              // Update existing comment to mark UI as deployed
              let body = existingComment.body;
              body = body.replace(/- \[ \] UI:.*/, `- [x] UI: [${previewUrl}](${previewUrl})`);
              commentBody = body;
            } else {
              // Create new comment with UI status
              commentBody = `## üöÄ Preview Deployments

            - [ ] API: ‚è≥ Deploying...
            - [ ] Generator Worker: ‚è≥ Deploying...
            - [x] UI: [${previewUrl}](${previewUrl})

            _Preview deployments will be automatically cleaned up when the PR is merged or closed._`;
            }

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }
