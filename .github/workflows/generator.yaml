name: Generator

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    uses: ./.github/workflows/test.yaml

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Load dotenv
      uses: falti/dotenv-action@v1.1.4
      with:
        path: .env
        export-variables: true
        keys-case: bypass

    - name: Auth Cloud SDK
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        export_environment_variables: true

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: '431.0.0'
        project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Install the project
      run: uv sync --locked --all-extras --dev

    - name: Generate requirements.txt
      run: |
        uv export --no-emit-project --format requirements-txt > generator/requirements.txt
        cat generator/requirements.txt

    - name: Compute function name
      id: fn-name
      run: |
        BASE_FN=${{ env.WORKER_FUNCTION_NAME }}
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "name=${BASE_FN}-pr-${{ github.event.pull_request.number }}" >>"$GITHUB_OUTPUT"
        else
          echo "name=${BASE_FN}" >>"$GITHUB_OUTPUT"
        fi

    - name: Deploy to Cloud Functions
      id: deploy
      run: |
        WORKER_FN_NAME="${{ steps.fn-name.outputs.name }}"
        gcloud functions deploy "$WORKER_FN_NAME" \
          --gen2 \
          --region="${{ env.GCP_REGION }}" \
          --runtime=python312 \
          --trigger-topic="${{ env.PUBSUB_TOPIC }}" \
          --source=generator \
          --entry-point=main \
          --memory=1Gi \
          --allow-unauthenticated \
          --set-env-vars=GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},FIRESTORE_COLLECTION=${{ env.FIRESTORE_COLLECTION }},GCS_CDN_BUCKET=${{ env.GCS_CDN_BUCKET }},GCS_WORKER_CACHE_BUCKET=${{ env.GCS_WORKER_CACHE_BUCKET }},LOG_LEVEL=info

        # Output the function URL for PR comments
        FUNCTION_URL=$(gcloud functions describe "$WORKER_FN_NAME" --region="${{ env.GCP_REGION }}" --format="value(serviceConfig.uri)")
        echo "function_url=$FUNCTION_URL" >> "$GITHUB_OUTPUT"

    - name: Update PR preview status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const functionName = `${{ steps.fn-name.outputs.name }}`;

          // Find existing preview comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });

          const existingComment = comments.data.find(
            comment => comment.body.includes('## üöÄ Preview Deployments')
          );

          let commentBody;
          if (existingComment) {
            // Update existing comment to mark Generator as deployed
            let body = existingComment.body;
            body = body.replace(/- \[ \] Generator Worker:.*/, `- [x] Generator Worker: \`${functionName}\` (Pub/Sub triggered)`);
            commentBody = body;
          } else {
            // Create new comment with Generator status
            commentBody = `## üöÄ Preview Deployments

          - [ ] API: ‚è≥ Deploying...
          - [x] Generator Worker: \`${functionName}\` (Pub/Sub triggered)
          - [ ] UI: ‚è≥ Deploying...

          _Preview deployments will be automatically cleaned up when the PR is merged or closed._`;
          }

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
          }
