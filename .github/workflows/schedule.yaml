name: Generate Songbook

on:
  schedule:
    # Run every 10 minutes
    - cron: '*/10 * * * *'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  generate-songbook:
    name: Generate Songbook (${{ matrix.edition }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        edition: [regular, complete]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Load environment variables
      uses: falti/dotenv-action@v1.1.4
      with:
        path: .env
        export-variables: true
        keys-case: bypass

    - name: Authenticate to Google Cloud
      id: auth
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Check for recent changes in GCS
      id: check-changes
      run: |
        CUTOFF_TIME=$(date -u -d '10 minutes ago' +%s)
        GCS_PATH="gs://${GCS_WORKER_CACHE_BUCKET}/song-sheets/"

        echo "Checking for files in $GCS_PATH modified after $(date -u -d @$CUTOFF_TIME +'%Y-%m-%dT%H:%M:%SZ')"

        # Capture the output of gcloud ls to check for errors and empty results
        GCS_LIST_JSON=$(gcloud storage ls "$GCS_PATH**" --json)
        if [[ $? -ne 0 ]]; then
            echo "::error::'gcloud storage ls' command failed."
            exit 1
        fi

        # Extract the most recent update timestamp
        LAST_UPDATED_STR=$(echo "$GCS_LIST_JSON" | jq -r '.[].updated' | sort -r | head -n 1)

        if [[ -z "$LAST_UPDATED_STR" || "$LAST_UPDATED_STR" == "null" ]]; then
          echo "No files found in GCS bucket or no valid update times. No changes detected."
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          exit 0
        fi

        # Convert timestamp to seconds since epoch for comparison
        LAST_UPDATED_TS=$(date -u -d "$LAST_UPDATED_STR" +%s)
        if [[ $? -ne 0 ]]; then
          echo "::error::Failed to parse timestamp '$LAST_UPDATED_STR'."
          exit 1
        fi

        if [[ "$LAST_UPDATED_TS" -gt "$CUTOFF_TIME" ]]; then
          echo "Found recent changes. Last update at $LAST_UPDATED_STR. Proceeding with songbook generation."
          echo "changes_detected=true" >> $GITHUB_OUTPUT
        else
          echo "No recent changes detected. Last update at $LAST_UPDATED_STR."
          echo "changes_detected=false" >> $GITHUB_OUTPUT
        fi

    - name: Trigger songbook generation
      if: steps.check-changes.outputs.changes_detected == 'true' || github.event_name == 'workflow_dispatch'
      run: |
        # Prepare the payload for the API using the matrix edition
        PAYLOAD=$(jq -n \
          --arg edition "${{ matrix.edition }}" \
          '{
            edition: $edition
          }')

        echo "Triggering songbook generation with payload: $PAYLOAD"

        # Get the API endpoint URL
        API_URL="https://${{ env.GCP_REGION }}-${{ env.GCP_PROJECT_ID }}.cloudfunctions.net/${{ env.API_FUNCTION_NAME }}"

        # Trigger the job
        RESPONSE=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD" \
          "$API_URL")

        echo "API Response: $RESPONSE"

        # Extract job ID
        JOB_ID=$(echo "$RESPONSE" | jq -r '.job_id')

        if [[ "$JOB_ID" == "null" || -z "$JOB_ID" ]]; then
          echo "Failed to create job"
          exit 1
        fi

        echo "Created job with ID: $JOB_ID"

        # Poll for completion (with timeout)
        TIMEOUT=120  # 2 minutes
        ELAPSED=0
        POLL_INTERVAL=1  # seconds

        while [[ $ELAPSED -lt $TIMEOUT ]]; do
          sleep $POLL_INTERVAL
          ELAPSED=$((ELAPSED + POLL_INTERVAL))

          STATUS_RESPONSE=$(curl -s "$API_URL/$JOB_ID")
          STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')
          PROGRESS=$(echo "$STATUS_RESPONSE" | jq -r '.progress // 0')
          MESSAGE=$(echo "$STATUS_RESPONSE" | jq -r '.last_message // ""')

          # Convert progress to percentage and round up
          PROGRESS_PERCENT=$(echo "$PROGRESS * 100" | bc -l | awk '{printf "%.0f", $1 + 0.5}')

          echo "[$ELAPSED/${TIMEOUT}s] Status: $STATUS, Progress: ${PROGRESS_PERCENT}%, Message: $MESSAGE"

          if [[ "$STATUS" == "completed" ]]; then
            echo "✅ Songbook generation completed successfully!"
            SOURCE_GCS_PATH="gs://${GCS_CDN_BUCKET}/${JOB_ID}/songbook.pdf"
            DEST_GCS_PATH="gs://${GCS_SONGBOOKS_BUCKET}/${{ matrix.edition }}.pdf"

            echo "Uploading to public bucket: ${DEST_GCS_PATH}"
            gsutil cp "${SOURCE_GCS_PATH}" "${DEST_GCS_PATH}"
            echo "✅ Successfully uploaded to ${DEST_GCS_PATH}"
            exit 0
          elif [[ "$STATUS" == "failed" ]]; then
            echo "❌ Songbook generation failed"
            echo "Full response: $STATUS_RESPONSE"
            exit 1
          fi
        done

        echo "⏰ Timeout reached after ${TIMEOUT} seconds"
        exit 1
