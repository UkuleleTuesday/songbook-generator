name: Daily Songbook Generation

on:
  schedule:
    # Run daily at 6:00 AM UTC (adjust timezone as needed)
    - cron: '0 6 * * *'
  workflow_dispatch:
    # Allow manual triggering for testing
    inputs:
      limit:
        description: 'Limit number of files (optional)'
        required: false
        type: number
      cover_file_id:
        description: 'Cover file ID (optional)'
        required: false
        type: string
      songbook_edition:
        description: 'Songbook edition filter (optional)'
        required: false
        type: choice
        options:
          - ''
          - regular
          - halloween
          - usa
          - womens
          - pride
          - valentines
          - uk
          - scotland
          - ireland
          - france
          - germany
          - australia
          - xmas
          - canada
          - italy
          - netherlands
          - spain
          - sweden
          - norway
          - russia
          - brazil
          - puerto rico
          - hawaii
          - peace
          - can2025
          - nocan2025
          - wales

permissions:
  contents: read

jobs:
  generate-daily-songbook:
    name: Generate Daily Songbook
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Load environment variables
      uses: falti/dotenv-action@v1.1.4
      with:
        path: .env
        export-variables: true
        keys-case: bypass
    
    - name: Trigger songbook generation
      run: |
        # Use defaults from UI
        DEFAULT_FOLDER_ID="1b_ZuZVOGgvkKVSUypkbRwBsXLVQGjl95"
        DEFAULT_COVER_FILE_ID="1rxn4Kl6fe-SUFqfYieb5FrxkVwHLLVPbwOXtWRGc740"
        DEFAULT_LIMIT=100
        
        # Prepare the payload for the API with defaults
        PAYLOAD=$(jq -n \
          --arg folder_id "$DEFAULT_FOLDER_ID" \
          --arg cover_id "$DEFAULT_COVER_FILE_ID" \
          --argjson limit "$DEFAULT_LIMIT" \
          '{
            source_folders: [$folder_id],
            cover_file_id: $cover_id,
            limit: $limit
          }')
        
        # Override with manual inputs if provided
        if [[ -n "${{ github.event.inputs.limit }}" ]]; then
          PAYLOAD=$(echo "$PAYLOAD" | jq ". + {\"limit\": ${{ github.event.inputs.limit }}}")
        fi
        
        if [[ -n "${{ github.event.inputs.cover_file_id }}" ]]; then
          PAYLOAD=$(echo "$PAYLOAD" | jq ". + {\"cover_file_id\": \"${{ github.event.inputs.cover_file_id }}\"}")
        fi
        
        if [[ -n "${{ github.event.inputs.songbook_edition }}" ]]; then
          FILTER="specialbooks:contains:${{ github.event.inputs.songbook_edition }}"
          PAYLOAD=$(echo "$PAYLOAD" | jq ". + {\"filters\": \"$FILTER\"}")
        fi
        
        echo "Triggering daily songbook generation with payload: $PAYLOAD"
        
        # Get the API endpoint URL
        API_URL="https://${{ env.GCP_REGION }}-${{ env.GCP_PROJECT_ID }}.cloudfunctions.net/${{ env.API_FUNCTION_NAME }}"
        
        # Trigger the job
        RESPONSE=$(curl -s -X POST \
          -H "Content-Type: application/json" \
          -d "$PAYLOAD" \
          "$API_URL")
        
        echo "API Response: $RESPONSE"
        
        # Extract job ID
        JOB_ID=$(echo "$RESPONSE" | jq -r '.job_id')
        
        if [[ "$JOB_ID" == "null" || -z "$JOB_ID" ]]; then
          echo "Failed to create job"
          exit 1
        fi
        
        echo "Created job with ID: $JOB_ID"
        
        # Poll for completion (with timeout)
        TIMEOUT=1800  # 30 minutes
        ELAPSED=0
        POLL_INTERVAL=30
        
        while [[ $ELAPSED -lt $TIMEOUT ]]; do
          sleep $POLL_INTERVAL
          ELAPSED=$((ELAPSED + POLL_INTERVAL))
          
          STATUS_RESPONSE=$(curl -s "$API_URL/$JOB_ID")
          STATUS=$(echo "$STATUS_RESPONSE" | jq -r '.status')
          PROGRESS=$(echo "$STATUS_RESPONSE" | jq -r '.progress // 0')
          MESSAGE=$(echo "$STATUS_RESPONSE" | jq -r '.last_message // ""')
          
          echo "[$ELAPSED/${TIMEOUT}s] Status: $STATUS, Progress: ${PROGRESS}%, Message: $MESSAGE"
          
          if [[ "$STATUS" == "completed" ]]; then
            RESULT_URL=$(echo "$STATUS_RESPONSE" | jq -r '.result_url')
            echo "✅ Songbook generation completed successfully!"
            echo "Download URL: $RESULT_URL"
            exit 0
          elif [[ "$STATUS" == "failed" ]]; then
            echo "❌ Songbook generation failed"
            echo "Full response: $STATUS_RESPONSE"
            exit 1
          fi
        done
        
        echo "⏰ Timeout reached after ${TIMEOUT} seconds"
        exit 1
