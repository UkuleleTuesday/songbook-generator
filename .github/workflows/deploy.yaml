name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  issues: write
  pull-requests: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "deploy-${{ github.event_name == 'pull_request' && github.event.pull_request.number || 'main' }}"
  cancel-in-progress: false

jobs:
  test:
    name: Run Tests and Linting
    uses: ./.github/workflows/test.yaml

  deploy-api:
    name: Deploy API Function
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Load dotenv
      uses: falti/dotenv-action@v1.1.4
      with:
        path: .env
        log-variables: true
        export-variables: true
        keys-case: bypass

    - name: Auth Cloud SDK
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        export_environment_variables: true

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: '431.0.0'
        project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Install the project
      run: uv sync --locked --all-extras --dev

    - name: Generate requirements.txt
      run: |
        uv export --no-emit-project --format requirements-txt > api/requirements.txt
        cat api/requirements.txt

    - name: Compute function name
      id: fn-name
      run: |
        BASE_FN=${{ env.API_FUNCTION_NAME }}
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "name=${BASE_FN}-pr-${{ github.event.pull_request.number }}" >>"$GITHUB_OUTPUT"
        else
          echo "name=${BASE_FN}" >>"$GITHUB_OUTPUT"
        fi

    - name: Deploy to Cloud Functions
      id: deploy
      run: |
        gcloud functions deploy "${{ steps.fn-name.outputs.name }}" \
          --gen2 \
          --region=${{ env.GCP_REGION }} \
          --runtime=python312 \
          --trigger-http \
          --source=api \
          --entry-point=main \
          --allow-unauthenticated \
          --set-env-vars=\
        GOOGLE_CLOUD_PROJECT=${{ env.GCP_PROJECT_ID }},\
        GCP_REGION=${{ env.GCP_REGION }},\
        PUBSUB_TOPIC=${{ env.PUBSUB_TOPIC }},\
        FIRESTORE_COLLECTION=${{ env.FIRESTORE_COLLECTION }},\
        GCS_CDN_BUCKET=${{ env.GCS_CDN_BUCKET }},\
        JOB_TTL_DAYS=3,\
        LOG_LEVEL=info

        # Output the function URL for PR comments
        FUNCTION_URL=$(gcloud functions describe "${{ steps.fn-name.outputs.name }}" --region="${{ env.GCP_REGION }}" --format="value(serviceConfig.uri)")
        echo "function_url=$FUNCTION_URL" >> "$GITHUB_OUTPUT"

    - name: Update PR preview status (API)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const functionUrl = `${{ steps.deploy.outputs.function_url }}`;

          // Find existing preview comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });

          const existingComment = comments.data.find(
            comment => comment.body.includes('## üöÄ Preview Deployments')
          );

          let commentBody;
          if (existingComment) {
            // Update existing comment to mark API as deployed
            let body = existingComment.body;
            body = body.replace(/- \[ \] API:.*/, `- [x] API: [${functionUrl}](${functionUrl})`);
            commentBody = body;
          } else {
            // Create new comment with API status
            commentBody = `## üöÄ Preview Deployments

          - [x] API: [${functionUrl}](${functionUrl})
          - [ ] Generator Worker: ‚è≥ Deploying...
          - [ ] UI: ‚è≥ Deploying...

          _Preview deployments will be automatically cleaned up when the PR is merged or closed._`;
          }

          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
          }

  deploy-generator:
    name: Deploy Generator Worker Function
    needs: test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Load dotenv
      uses: falti/dotenv-action@v1.1.4
      with:
        path: .env
        export-variables: true
        keys-case: bypass

    - name: Auth Cloud SDK
      uses: 'google-github-actions/auth@v2'
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        export_environment_variables: true

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        version: '431.0.0'
        project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5

    - name: Install the project
      run: uv sync --locked --all-extras --dev

    - name: Generate requirements.txt
      run: |
        uv export --no-emit-project --format requirements-txt > generator/requirements.txt
        cat generator/requirements.txt

    - name: Compute function name
      id: fn-name
      run: |
        BASE_FN=${{ env.WORKER_FUNCTION_NAME }}
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "name=${BASE_FN}-pr-${{ github.event.pull_request.number }}" >>"$GITHUB_OUTPUT"
        else
          echo "name=${BASE_FN}" >>"$GITHUB_OUTPUT"
        fi

    - name: Deploy to Cloud Functions
      id: deploy
      run: |
        WORKER_FN_NAME="${{ steps.fn-name.outputs.name }}"
        gcloud functions deploy "$WORKER_FN_NAME" \
          --gen2 \
          --region="${{ env.GCP_REGION }}" \
          --runtime=python312 \
          --trigger-topic="${{ env.PUBSUB_TOPIC }}" \
          --source=generator \
          --entry-point=main \
          --memory=1Gi \
          --allow-unauthenticated \
          --set-env-vars=GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }},FIRESTORE_COLLECTION=${{ env.FIRESTORE_COLLECTION }},GCS_CDN_BUCKET=${{ env.GCS_CDN_BUCKET }},GCS_WORKER_CACHE_BUCKET=${{ env.GCS_WORKER_CACHE_BUCKET }},LOG_LEVEL=info

    - name: Update PR preview status (Generator)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const prNumber = context.payload.pull_request.number;
          const functionName = `${{ steps.fn-name.outputs.name }}`;

          // Find existing preview comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: prNumber,
          });

          const existingComment = comments.data.find(
            comment => comment.body.includes('## üöÄ Preview Deployments')
          );

          if (existingComment) {
            // Update existing comment to mark Generator as deployed
            let body = existingComment.body;
            body = body.replace(/- \[ \] Generator Worker:.*/, `- [x] Generator Worker: \`${functionName}\` (Pub/Sub triggered)`);
            
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: body
            });
          } else {
            // If no comment exists yet, create one (shouldn't happen since API deploys first)
            const commentBody = `## üöÄ Preview Deployments

          - [ ] API: ‚è≥ Deploying...
          - [x] Generator Worker: \`${functionName}\` (Pub/Sub triggered)
          - [ ] UI: ‚è≥ Deploying...

          _Preview deployments will be automatically cleaned up when the PR is merged or closed._`;
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: commentBody
            });
          }

  deploy-ui:
    name: Deploy UI to GitHub Pages
    needs: test
    environment:
      name: ${{ github.event_name == 'pull_request' && format('github-pages-pr-{0}', github.event.pull_request.number) || 'github-pages' }}
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Prepare UI content
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PRs, create a subdirectory structure
            mkdir -p preview/pr-${{ github.event.pull_request.number }}
            cp -r ui/* preview/pr-${{ github.event.pull_request.number }}/
            echo "Prepared preview for PR #${{ github.event.pull_request.number }}"
          else
            # For main branch, use ui directly
            cp -r ui preview
            echo "Prepared main deployment"
          fi

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'preview'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Update PR preview status (UI)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.payload.pull_request.number;
            const previewUrl = `${{ steps.deployment.outputs.page_url }}pr-${prNumber}/`;

            // Find existing preview comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.data.find(
              comment => comment.body.includes('## üöÄ Preview Deployments')
            );

            if (existingComment) {
              // Update existing comment to mark UI as deployed
              let body = existingComment.body;
              body = body.replace(/- \[ \] UI:.*/, `- [x] UI: [${previewUrl}](${previewUrl})`);
              
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment with UI status (shouldn't happen often)
              const commentBody = `## üöÄ Preview Deployments

            - [ ] API: ‚è≥ Deploying...
            - [ ] Generator Worker: ‚è≥ Deploying...
            - [x] UI: [${previewUrl}](${previewUrl})

            _Preview deployments will be automatically cleaned up when the PR is merged or closed._`;
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
            }
