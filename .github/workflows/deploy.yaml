name: Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - opened
      - reopened
      - synchronize
      - closed

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write
  issues: write
  pull-requests: write
  checks: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "deploy-${{ github.event_name == 'pull_request' && github.event.pull_request.number || 'main' }}"
  cancel-in-progress: false

jobs:
  test:
    name: Test and Lint
    if: github.event.action != 'closed'
    uses: ./.github/workflows/test.yaml

  deploy-infrastructure:
    name: Deploy GCS Infrastructure
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup GCP and dependencies
      uses: ./.github/actions/setup-gcp-deps
      with:
        gcp_sa_key: ${{ secrets.GCP_SA_KEY }}
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Override environment variables for PR environment
      if: github.event_name == 'pull_request'
      run: |
        PR_NUM="${{ github.event.pull_request.number }}"
        echo "Setting up PR-specific environment variables for PR #${PR_NUM}"

        # Override environment variables for PR environment
        echo "PUBSUB_TOPIC=${{ env.PUBSUB_TOPIC }}-pr-${PR_NUM}" >> $GITHUB_ENV
        echo "CACHE_REFRESH_PUBSUB_TOPIC=${{ env.CACHE_REFRESH_PUBSUB_TOPIC }}-pr-${PR_NUM}" >> $GITHUB_ENV
        echo "DRIVE_CHANGES_PUBSUB_TOPIC=${{ env.DRIVE_CHANGES_PUBSUB_TOPIC }}-pr-${PR_NUM}" >> $GITHUB_ENV

        echo "PR environment variables set:"
        echo "- PUBSUB_TOPIC: ${{ env.PUBSUB_TOPIC }}-pr-${PR_NUM}"
        echo "- CACHE_REFRESH_PUBSUB_TOPIC: ${{ env.CACHE_REFRESH_PUBSUB_TOPIC }}-pr-${PR_NUM}"
        echo "- DRIVE_CHANGES_PUBSUB_TOPIC: ${{ env.DRIVE_CHANGES_PUBSUB_TOPIC }}-pr-${PR_NUM}"

    - name: Create Pub/Sub topic
      run: |
        echo "Creating Pub/Sub topic ${PUBSUB_TOPIC}…"
        gcloud pubsub topics create "${PUBSUB_TOPIC}" \
          --project="${{ env.GCP_PROJECT_ID }}" || echo "Topic may already exist, continuing…"

        echo "Creating Pub/Sub topic ${CACHE_REFRESH_PUBSUB_TOPIC}…"
        gcloud pubsub topics create "${CACHE_REFRESH_PUBSUB_TOPIC}" \
          --project="${{ env.GCP_PROJECT_ID }}" || echo "Topic may already exist, continuing…"

        echo "Creating Pub/Sub topic ${DRIVE_CHANGES_PUBSUB_TOPIC}…"
        gcloud pubsub topics create "${DRIVE_CHANGES_PUBSUB_TOPIC}" \
          --project="${{ env.GCP_PROJECT_ID }}" || echo "Topic may already exist, continuing…"

  deploy-api:
    name: Deploy API
    needs: [test, deploy-infrastructure]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup GCP and dependencies
      uses: ./.github/actions/setup-gcp-deps
      with:
        gcp_sa_key: ${{ secrets.GCP_SA_KEY }}
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Deploy API Cloud Function
      uses: ./.github/actions/deploy-cloud-function
      with:
        function_name: ${{ env.API_FUNCTION_NAME }}
        entry_point: 'api'
        component_name: 'API'
        memory: '512MiB'
        cpu: '0.5'
        trigger_type: 'http'
        env_vars: |
          SERVICE_NAME: "songbook-api"
          GOOGLE_CLOUD_PROJECT: "${{ env.GCP_PROJECT_ID }}"
          GCP_REGION: "${{ env.GCP_REGION }}"
          PUBSUB_TOPIC: "${{ github.event_name == 'pull_request' && format('{0}-pr-{1}', env.PUBSUB_TOPIC, github.event.pull_request.number) || env.PUBSUB_TOPIC }}"
          FIRESTORE_COLLECTION: "${{ env.FIRESTORE_COLLECTION }}"
          GCS_CDN_BUCKET: "${{ env.GCS_CDN_BUCKET }}"
          JOB_TTL_DAYS: "3"
          OTEL_SERVICE_NAME: "songbook-api"
          OTEL_RESOURCE_ATTRIBUTES: "gcp.project_id=${{ env.GCP_PROJECT_ID }},service.name=songbook-api"
          OTEL_EXPORTER_OTLP_ENDPOINT: "https://telemetry.googleapis.com"
          OTEL_SDK_DISABLED: "false"
          LOG_LEVEL: "info"
          LOCAL_CACHE_ENABLED: "false"

  deploy-generator:
    name: Deploy Worker
    needs: [test, deploy-infrastructure]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup GCP and dependencies
      uses: ./.github/actions/setup-gcp-deps
      with:
        gcp_sa_key: ${{ secrets.GCP_SA_KEY }}
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Deploy Worker Cloud Function
      uses: ./.github/actions/deploy-cloud-function
      with:
        function_name: ${{ env.WORKER_FUNCTION_NAME }}
        entry_point: 'worker'
        component_name: 'Generator Worker'
        memory: '1Gi'
        cpu: '1'
        concurrency: 1
        max_instances: 1
        trigger_type: 'topic'
        trigger_topic: "${{ github.event_name == 'pull_request' && format('{0}-pr-{1}', env.PUBSUB_TOPIC, github.event.pull_request.number) || env.PUBSUB_TOPIC }}"
        env_vars: |
          SERVICE_NAME: "songbook-generator"
          GCP_PROJECT_ID: "${{ env.GCP_PROJECT_ID }}"
          GOOGLE_CLOUD_PROJECT: "${{ env.GCP_PROJECT_ID }}"
          FIRESTORE_COLLECTION: "${{ env.FIRESTORE_COLLECTION }}"
          GCS_CDN_BUCKET: "${{ env.GCS_CDN_BUCKET }}"
          GCS_WORKER_CACHE_BUCKET: "${{ env.GCS_WORKER_CACHE_BUCKET }}"
          GCP_REGION: "${{ env.GCP_REGION }}"
          GDRIVE_SONG_SHEETS_FOLDER_IDS: "${{ env.GDRIVE_SONG_SHEETS_FOLDER_IDS }}"
          GENERATOR_ADD_PAGE_NUMBERS: "${{ env.GENERATOR_ADD_PAGE_NUMBERS }}"
          OTEL_SERVICE_NAME: "songbook-generator"
          OTEL_RESOURCE_ATTRIBUTES: "gcp.project_id=${{ env.GCP_PROJECT_ID }},service.name=songbook-generator"
          OTEL_EXPORTER_OTLP_ENDPOINT: "https://telemetry.googleapis.com"
          OTEL_SDK_DISABLED: "false"
          LOG_LEVEL: "info"
          LOCAL_CACHE_ENABLED: "false"

  deploy-merger:
    name: Deploy Merger
    needs: [test, deploy-infrastructure]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup GCP and dependencies
      uses: ./.github/actions/setup-gcp-deps
      with:
        gcp_sa_key: ${{ secrets.GCP_SA_KEY }}
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Deploy Merger Cloud Function
      uses: ./.github/actions/deploy-cloud-function
      with:
        function_name: ${{ env.MERGER_FUNCTION_NAME }}
        entry_point: 'merger'
        component_name: 'Merger'
        memory: '1Gi'
        cpu: '1'
        concurrency: 1
        max_instances: 1
        trigger_type: 'topic'
        trigger_topic: "${{ github.event_name == 'pull_request' && format('{0}-pr-{1}', env.CACHE_REFRESH_PUBSUB_TOPIC, github.event.pull_request.number) || env.CACHE_REFRESH_PUBSUB_TOPIC }}"
        env_vars: |
          SERVICE_NAME: "songbook-merger"
          GCP_PROJECT_ID: "${{ env.GCP_PROJECT_ID }}"
          GOOGLE_CLOUD_PROJECT: "${{ env.GCP_PROJECT_ID }}"
          GCP_REGION: "${{ env.GCP_REGION }}"
          GCS_WORKER_CACHE_BUCKET: "${{ env.GCS_WORKER_CACHE_BUCKET }}"
          GDRIVE_SONG_SHEETS_FOLDER_IDS: "${{ env.GDRIVE_SONG_SHEETS_FOLDER_IDS }}"
          OTEL_SERVICE_NAME: "songbook-merger"
          OTEL_RESOURCE_ATTRIBUTES: "gcp.project_id=${{ env.GCP_PROJECT_ID }},service.name=songbook-merger"
          OTEL_EXPORTER_OTLP_ENDPOINT: "https://telemetry.googleapis.com"
          OTEL_SDK_DISABLED: "false"
          LOG_LEVEL: "info"
          LOCAL_CACHE_ENABLED: "false"

    - name: Publish test message to trigger a sync
      run: |
        CACHE_REFRESH_PUBSUB_TOPIC="${{ github.event_name == 'pull_request' && format('{0}-pr-{1}', env.CACHE_REFRESH_PUBSUB_TOPIC, github.event.pull_request.number) || env.CACHE_REFRESH_PUBSUB_TOPIC }}"
        echo "Publishing test message to ${CACHE_REFRESH_PUBSUB_TOPIC} to trigger sync..."
        gcloud pubsub topics publish "$CACHE_REFRESH_PUBSUB_TOPIC" \
          --message="Initial sync after deploy" \
          --attribute="force=false"

  deploy-tagupdater:
    name: Deploy Tag Updater
    needs: [test, deploy-infrastructure]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup GCP and dependencies
      uses: ./.github/actions/setup-gcp-deps
      with:
        gcp_sa_key: ${{ secrets.GCP_SA_KEY }}
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Deploy Tag Updater Cloud Function
      uses: ./.github/actions/deploy-cloud-function
      with:
        function_name: ${{ env.TAGUPDATER_FUNCTION_NAME }}
        entry_point: 'tagupdater'
        component_name: 'Tag Updater'
        memory: '512Mi'
        cpu: '0.5'
        concurrency: 1
        max_instances: 5
        trigger_type: 'topic'
        trigger_topic: "${{ github.event_name == 'pull_request' && format('{0}-pr-{1}', env.DRIVE_CHANGES_PUBSUB_TOPIC, github.event.pull_request.number) || env.DRIVE_CHANGES_PUBSUB_TOPIC }}"
        env_vars: |
          SERVICE_NAME: "songbook-tagupdater"
          GCP_PROJECT_ID: "${{ env.GCP_PROJECT_ID }}"
          GOOGLE_CLOUD_PROJECT: "${{ env.GCP_PROJECT_ID }}"
          GCP_REGION: "${{ env.GCP_REGION }}"
          GCS_WORKER_CACHE_BUCKET: "${{ env.GCS_WORKER_CACHE_BUCKET }}"
          OTEL_SERVICE_NAME: "songbook-tagupdater"
          OTEL_RESOURCE_ATTRIBUTES: "gcp.project_id=${{ env.GCP_PROJECT_ID }},service.name=songbook-tagupdater"
          OTEL_EXPORTER_OTLP_ENDPOINT: "https://telemetry.googleapis.com"
          OTEL_SDK_DISABLED: "false"
          LOG_LEVEL: "info"
          LOCAL_CACHE_ENABLED: "false"

  deploy-drivewatcher:
    name: Deploy Drive Watcher
    needs: [test, deploy-infrastructure]
    if: github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup GCP and dependencies
      uses: ./.github/actions/setup-gcp-deps
      with:
        gcp_sa_key: ${{ secrets.GCP_SA_KEY }}
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Create Pub/Sub topics for drive watcher
      run: |
        DRIVE_CHANGES_PUBSUB_TOPIC="${{ github.event_name == 'pull_request' && format('{0}-pr-{1}', env.DRIVE_CHANGES_PUBSUB_TOPIC, github.event.pull_request.number) || env.DRIVE_CHANGES_PUBSUB_TOPIC }}"
        echo "Creating Pub/Sub topic ${DRIVE_CHANGES_PUBSUB_TOPIC}…"
        gcloud pubsub topics create "${DRIVE_CHANGES_PUBSUB_TOPIC}" \
          --project="${{ env.GCP_PROJECT_ID }}" || echo "Topic may already exist, continuing…"

        # Create separate topic for drivewatcher scheduling (separate from file changes)
        DRIVEWATCHER_TRIGGER_TOPIC="${{ github.event_name == 'pull_request' && format('drivewatcher-trigger-pr-{0}', github.event.pull_request.number) || 'drivewatcher-trigger' }}"
        echo "Creating Pub/Sub topic ${DRIVEWATCHER_TRIGGER_TOPIC}…"
        gcloud pubsub topics create "${DRIVEWATCHER_TRIGGER_TOPIC}" \
          --project="${{ env.GCP_PROJECT_ID }}" || echo "Topic may already exist, continuing…"

    - name: Deploy Drive Watcher Cloud Function
      id: deploy
      uses: ./.github/actions/deploy-cloud-function
      with:
        function_name: ${{ env.DRIVEWATCHER_FUNCTION_NAME }}
        entry_point: 'drivewatcher'
        component_name: 'Drive Watcher'
        memory: '512Mi'
        cpu: '0.5'
        concurrency: 1
        max_instances: 1
        trigger_type: 'topic'
        trigger_topic: "${{ github.event_name == 'pull_request' && format('drivewatcher-trigger-pr-{0}', github.event.pull_request.number) || 'drivewatcher-trigger' }}"
        env_vars: |
          SERVICE_NAME: "songbook-drivewatcher"
          GCP_PROJECT_ID: "${{ env.GCP_PROJECT_ID }}"
          GOOGLE_CLOUD_PROJECT: "${{ env.GCP_PROJECT_ID }}"
          GCP_REGION: "${{ env.GCP_REGION }}"
          GCS_WORKER_CACHE_BUCKET: "${{ env.GCS_WORKER_CACHE_BUCKET }}"
          DRIVE_WATCHED_FOLDERS: "${{ env.GDRIVE_SONG_SHEETS_FOLDER_IDS }}"
          DRIVE_CHANGES_PUBSUB_TOPIC: "${{ github.event_name == 'pull_request' && format('{0}-pr-{1}', env.DRIVE_CHANGES_PUBSUB_TOPIC, github.event.pull_request.number) || env.DRIVE_CHANGES_PUBSUB_TOPIC }}"
          OTEL_SERVICE_NAME: "songbook-drivewatcher"
          OTEL_RESOURCE_ATTRIBUTES: "gcp.project_id=${{ env.GCP_PROJECT_ID }},service.name=songbook-drivewatcher"
          OTEL_EXPORTER_OTLP_ENDPOINT: "https://telemetry.googleapis.com"
          OTEL_SDK_DISABLED: "false"
          LOG_LEVEL: "info"
          LOCAL_CACHE_ENABLED: "false"

    - name: Create Cloud Scheduler job
      run: |
        DRIVEWATCHER_FN_NAME="${{ steps.deploy.outputs.function_name }}"
        DRIVEWATCHER_TRIGGER_TOPIC="${{ github.event_name == 'pull_request' && format('drivewatcher-trigger-pr-{0}', github.event.pull_request.number) || 'drivewatcher-trigger' }}"

        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          SCHEDULER_JOB_NAME="${{ env.DRIVEWATCHER_FUNCTION_NAME }}-scheduler-pr-${{ github.event.pull_request.number }}"
        else
          SCHEDULER_JOB_NAME="${{ env.DRIVEWATCHER_FUNCTION_NAME }}-scheduler"
        fi

        echo "Creating Cloud Scheduler job: ${SCHEDULER_JOB_NAME}"

        # Delete existing job if it exists (for updates)
        gcloud scheduler jobs delete "${SCHEDULER_JOB_NAME}" \
          --location="${{ env.GCP_REGION }}" \
          --project="${{ env.GCP_PROJECT_ID }}" \
          --quiet || echo "Job may not exist, continuing..."

        # Create the scheduler job to trigger every 5 minutes
        gcloud scheduler jobs create pubsub "${SCHEDULER_JOB_NAME}" \
          --location="${{ env.GCP_REGION }}" \
          --project="${{ env.GCP_PROJECT_ID }}" \
          --schedule="*/5 * * * *" \
          --topic="${DRIVEWATCHER_TRIGGER_TOPIC}" \
          --message-body='{"trigger": "scheduled", "source": "cloud-scheduler"}' \
          --attributes="source=cloud-scheduler" \
          --description="Trigger drive watcher function every 5 minutes"

  deploy-ui:
    name: Deploy UI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to GitHub Pages (main branch only)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          folder: ui
          clean-exclude: pr-preview/

      - name: Deploy PR Preview (PRs only)
        if: github.event_name == 'pull_request'
        uses: rossjrw/pr-preview-action@v1
        with:
          source-dir: ui

      - name: Update PR preview status
        if: github.event_name == 'pull_request' && github.event.action != 'closed'
        uses: ./.github/actions/update-pr-comment
        with:
          component: 'UI'
          url: 'https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr-preview/pr-${{ github.event.pull_request.number }}/'

  cleanup-pr-resources:
    name: Cleanup PR Resources
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup GCP and dependencies
      uses: ./.github/actions/setup-gcp-deps
      with:
        gcp_sa_key: ${{ secrets.GCP_SA_KEY }}
        gcp_project_id: ${{ vars.GCP_PROJECT_ID }}

    - name: Delete PR Cloud Functions
      run: |
        PR_NUM="${{ github.event.pull_request.number }}"
        API_FN_NAME="${{ env.API_FUNCTION_NAME }}-pr-${PR_NUM}"
        WORKER_FN_NAME="${{ env.WORKER_FUNCTION_NAME }}-pr-${PR_NUM}"
        MERGER_FN_NAME="${{ env.MERGER_FUNCTION_NAME }}-pr-${PR_NUM}"
        DRIVEWATCHER_FN_NAME="${{ env.DRIVEWATCHER_FUNCTION_NAME }}-pr-${PR_NUM}"
        TAGUPDATER_FN_NAME="${{ env.TAGUPDATER_FUNCTION_NAME }}-pr-${PR_NUM}"

        echo "Cleaning up PR #${PR_NUM} resources..."

        # Delete API function
        if gcloud functions describe "$API_FN_NAME" --region="${{ env.GCP_REGION }}" >/dev/null 2>&1; then
          echo "Deleting API function: $API_FN_NAME"
          gcloud functions delete "$API_FN_NAME" --region="${{ env.GCP_REGION }}" --quiet
        else
          echo "API function $API_FN_NAME not found, skipping"
        fi

        # Delete Worker function
        if gcloud functions describe "$WORKER_FN_NAME" --region="${{ env.GCP_REGION }}" >/dev/null 2>&1; then
          echo "Deleting Worker function: $WORKER_FN_NAME"
          gcloud functions delete "$WORKER_FN_NAME" --region="${{ env.GCP_REGION }}" --quiet
        else
          echo "Worker function $WORKER_FN_NAME not found, skipping"
        fi

        # Delete Merger function
        if gcloud functions describe "$MERGER_FN_NAME" --region="${{ env.GCP_REGION }}" >/dev/null 2>&1; then
          echo "Deleting Merger function: $MERGER_FN_NAME"
          gcloud functions delete "$MERGER_FN_NAME" --region="${{ env.GCP_REGION }}" --quiet
        else
          echo "Merger function $MERGER_FN_NAME not found, skipping"
        fi

        # Delete Drive Watcher function
        if gcloud functions describe "$DRIVEWATCHER_FN_NAME" --region="${{ env.GCP_REGION }}" >/dev/null 2>&1; then
          echo "Deleting Drive Watcher function: $DRIVEWATCHER_FN_NAME"
          gcloud functions delete "$DRIVEWATCHER_FN_NAME" --region="${{ env.GCP_REGION }}" --quiet
        else
          echo "Drive Watcher function $DRIVEWATCHER_FN_NAME not found, skipping"
        fi

        # Delete Tag Updater function
        if gcloud functions describe "$TAGUPDATER_FN_NAME" --region="${{ env.GCP_REGION }}" >/dev/null 2>&1; then
          echo "Deleting Tag Updater function: $TAGUPDATER_FN_NAME"
          gcloud functions delete "$TAGUPDATER_FN_NAME" --region="${{ env.GCP_REGION }}" --quiet
        else
          echo "Tag Updater function $TAGUPDATER_FN_NAME not found, skipping"
        fi

    - name: Delete PR Cloud Scheduler jobs
      run: |
        PR_NUM="${{ github.event.pull_request.number }}"
        DRIVEWATCHER_SCHEDULER_JOB_NAME="${{ env.DRIVEWATCHER_FUNCTION_NAME }}-scheduler-pr-${PR_NUM}"

        # Delete Drive Watcher scheduler job
        if gcloud scheduler jobs describe "$DRIVEWATCHER_SCHEDULER_JOB_NAME" --location="${{ env.GCP_REGION }}" --project="${{ env.GCP_PROJECT_ID }}" >/dev/null 2>&1; then
          echo "Deleting Cloud Scheduler job: $DRIVEWATCHER_SCHEDULER_JOB_NAME"
          gcloud scheduler jobs delete "$DRIVEWATCHER_SCHEDULER_JOB_NAME" --location="${{ env.GCP_REGION }}" --project="${{ env.GCP_PROJECT_ID }}" --quiet
        else
          echo "Scheduler job $DRIVEWATCHER_SCHEDULER_JOB_NAME not found, skipping"
        fi

    - name: Delete PR Pub/Sub topics
      run: |
        PR_NUM="${{ github.event.pull_request.number }}"

        SONGBOOK_GEN_TOPIC_NAME="${{ env.PUBSUB_TOPIC }}-pr-${PR_NUM}"
        if gcloud pubsub topics describe "$SONGBOOK_GEN_TOPIC_NAME" --project="${{ env.GCP_PROJECT_ID }}" >/dev/null 2>&1; then
          echo "Deleting Pub/Sub topic: $SONGBOOK_GEN_TOPIC_NAME"
          gcloud pubsub topics delete "$SONGBOOK_GEN_TOPIC_NAME" --project="${{ env.GCP_PROJECT_ID }}" --quiet
        else
          echo "Pub/Sub topic $SONGBOOK_GEN_TOPIC_NAME not found, skipping"
        fi

        CACHE_REFRESH_TOPIC_NAME="${{ env.CACHE_REFRESH_PUBSUB_TOPIC }}-pr-${PR_NUM}"
        if gcloud pubsub topics describe "$CACHE_REFRESH_TOPIC_NAME" --project="${{ env.GCP_PROJECT_ID }}" >/dev/null 2>&1; then
          echo "Deleting Pub/Sub topic: $CACHE_REFRESH_TOPIC_NAME"
          gcloud pubsub topics delete "$CACHE_REFRESH_TOPIC_NAME" --project="${{ env.GCP_PROJECT_ID }}" --quiet
        else
          echo "Pub/Sub topic $CACHE_REFRESH_TOPIC_NAME not found, skipping"
        fi

        DRIVE_CHANGES_TOPIC_NAME="${{ env.DRIVE_CHANGES_PUBSUB_TOPIC }}-pr-${PR_NUM}"
        if gcloud pubsub topics describe "$DRIVE_CHANGES_TOPIC_NAME" --project="${{ env.GCP_PROJECT_ID }}" >/dev/null 2>&1; then
          echo "Deleting Pub/Sub topic: $DRIVE_CHANGES_TOPIC_NAME"
          gcloud pubsub topics delete "$DRIVE_CHANGES_TOPIC_NAME" --project="${{ env.GCP_PROJECT_ID }}" --quiet
        else
          echo "Pub/Sub topic $DRIVE_CHANGES_TOPIC_NAME not found, skipping"
        fi

        DRIVEWATCHER_TRIGGER_TOPIC_NAME="drivewatcher-trigger-pr-${PR_NUM}"
        if gcloud pubsub topics describe "$DRIVEWATCHER_TRIGGER_TOPIC_NAME" --project="${{ env.GCP_PROJECT_ID }}" >/dev/null 2>&1; then
          echo "Deleting Pub/Sub topic: $DRIVEWATCHER_TRIGGER_TOPIC_NAME"
          gcloud pubsub topics delete "$DRIVEWATCHER_TRIGGER_TOPIC_NAME" --project="${{ env.GCP_PROJECT_ID }}" --quiet
        else
          echo "Pub/Sub topic $DRIVEWATCHER_TRIGGER_TOPIC_NAME not found, skipping"
        fi
